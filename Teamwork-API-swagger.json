{
  "swagger": "2.0",
  "info": {
    "description": "Teamwork.com Projects API",
    "version": "1.0.0",
    "title": "Teamwork.com API"
  },
  "tags": [
    {
      "name": "Activity",
      "description": "Account and logged in user related details"
    },
    {
      "name": "Billing Invoice",
      "description": "Manage Invoices & Get Currency Codes"
    },
    {
      "name": "Billing Expense",
      "description": "Manage Expenses for billing"
    },
    {
      "name": "Boards",
      "description": "Mange and Move Boards"
    },
    {
      "name": "Message Categories",
      "description": "Methods to manage Message Categories"
    },
    {
      "name": "File Category",
      "description": "Methods to manage File Categories"
    },
    {
      "name": "Notebook Category",
      "description": "Methods to manage Notebook Categories"
    },
    {
      "name": "Link Category",
      "description": "Methods to manage Link Categories"
    },
    {
      "name": "Project Categories",
      "description": "Methods to manage Project Categories"
    },
    {
      "name": "Comments",
      "description": "Manage comments, mark them read"
    },
    {
      "name": "Calendar Events",
      "description": "Manage Events"
    },
    {
      "name": "Companies",
      "description": "Manage Companies"
    },
    {
      "name": "Files",
      "description": "Manage Files, related to tasks and Projects, make short URLs, Update project logo"
    },
    {
      "name": "Files - Uploading",
      "description": "Uploading files"
    },
    {
      "name": "Messages",
      "description": "Manage and Archive Messages"
    },
    {
      "name": "Messages Replies",
      "description": "Manage Message Replies and Mark as read"
    },
    {
      "name": "Milestones",
      "description": "Manage and Complete / Uncomplete Milestones"
    },
    {
      "name": "Notebooks",
      "description": "Manage, Lock / Unlock Notebooks"
    },
    {
      "name": "People",
      "description": "Manage People, retrieve API keys and Unassign someone from all tasks"
    },
    {
      "name": "People-Status",
      "description": "Get and Update user status Messages"
    },
    {
      "name": "Permissions",
      "description": "Add / Remove users from projects, Manage their permissions"
    },
    {
      "name": "Projects",
      "description": "Manage Projects, Star / Unstar, link Box / Google Drive, Manage Project Rates"
    },
    {
      "name": "Project Roles",
      "description": "Manage Roles"
    },
    {
      "name": "Project Email Addresses",
      "description": "Get and Update Project Email Addresses"
    },
    {
      "name": "Links",
      "description": "Manage URL Links and Get URL links by Projects"
    },
    {
      "name": "Risks",
      "description": "Get risks by Project"
    },
    {
      "name": "Search Projects",
      "description": "Search using Search Term and Tags across almost all resources"
    },
    {
      "name": "Time Tracking",
      "description": "Manage Time entries on Projects and Todo Items and get totals"
    },
    {
      "name": "Task Lists",
      "description": "Manage, reorder and Move task lists. Get template task lists."
    },
    {
      "name": "Tasks",
      "description": "Manage Tasks, Get Dependencies, Mark Complete / Incomplete, Manage Task Followers"
    },
    {
      "name": "Task Reminders",
      "description": "Manage Task Reminders"
    },
    {
      "name": "Tags",
      "description": "Manage Tags. Get Update Tags by Resources."
    },
    {
      "name": "Web Hooks",
      "description": "Manage, Pause / Resume Web Hooks."
    },
    {
      "name": "Workload",
      "description": "Get Workload details"
    }
  ],
  "paths": {
    "/account.json": {
      "get": {
        "summary": "Get Account Details",
        "tags": [
          "Account"
        ],
        "description": "Lists the latest activity across all projects ordered chronologically\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/authenticate.json": {
      "get": {
        "summary": "The 'Authenticate' Call",
        "tags": [
          "Account"
        ],
        "description": "Lists the latest activity list new tasks etc. for a given project.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/latestActivity.json": {
      "get": {
        "summary": "Latest Activity across all projects",
        "tags": [
          "Activity"
        ],
        "description": "Lists the latest activity across all projects ordered chronologically\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "maxItems",
            "type": "int",
            "description": "(numeric, default=60, Max=200)",
            "in": "query",
            "required": false
          },
          {
            "name": "onlyStarred ",
            "type": "boolean",
            "description": "(boolean, default=false)",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/latestActivity.json": {
      "get": {
        "summary": "List Latest Activity (for a project)",
        "tags": [
          "Activity"
        ],
        "description": "Lists the latest activity list new tasks etc. for a given project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "maxItems",
            "type": "int",
            "description": "(numeric, default=60, Max=200)",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/activity/{id}.json": {
      "delete": {
        "summary": "Delete an activity entry",
        "tags": [
          "Activity"
        ],
        "description": "Deletes the given activity log entry referenced by {id}.   \n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/invoices.json": {
      "get": {
        "summary": "Get all invoices across your projects",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Get all invoices across your projects\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "maxItems",
            "type": "string",
            "description": "(string, default=active) - Which types of invoices to return",
            "enum": [
              "all",
              "completed",
              "active"
            ],
            "in": "query",
            "required": false
          },
          {
            "name": "projectStatus",
            "type": "string",
            "description": " (string, default=active) - Which projects to query for invoices",
            "enum": [
              "all",
              "archived",
              "active"
            ],
            "in": "query",
            "required": false
          },
          {
            "name": "page",
            "type": "int",
            "description": "(integer, default=1) - The page of results to return",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a new invoice in a project",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Create a new invoice in a project\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/invoices.json": {
      "get": {
        "summary": "Get all invoices on a single project",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Get all invoices on a single project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "type",
            "type": "string",
            "description": "(string, default=active) - Which types of invoices to return",
            "enum": [
              "all",
              "completed",
              "active"
            ],
            "in": "query",
            "required": false
          },
          {
            "name": "page",
            "type": "int",
            "description": "(integer, default=1) - The page of results to return",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/invoices/{invoice_id}.json": {
      "get": {
        "summary": "Get a single invoice",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Get a single invoice\n",
        "parameters": [
          {
            "name": "invoice_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a specific invoice",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Update a specific invoice\n",
        "parameters": [
          {
            "name": "invoice_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/invoices/{invoice_id}/complete.json": {
      "put": {
        "summary": "Mark a specific invoice as complete",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Mark a specific invoice as complete\n",
        "parameters": [
          {
            "name": "invoice_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/invoices/{invoice_id}/uncomplete.json": {
      "put": {
        "summary": "Mark a specific invoice as not complete",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Mark a specific invoice as not complete\n",
        "parameters": [
          {
            "name": "invoice_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/currencycodes.json": {
      "get": {
        "summary": "Get a list of valid currency codes",
        "tags": [
          "Billing Invoice"
        ],
        "description": "Get a list of valid currency codes\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/expenses.json": {
      "get": {
        "summary": "Get all expenses across your projects",
        "tags": [
          "Billing Expense"
        ],
        "description": "Get all expenses across your projects\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a new expense in a project",
        "tags": [
          "Billing Expense"
        ],
        "description": "Create a new expense in a project\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/expenses.json": {
      "get": {
        "summary": "Get all expenses on a single project",
        "tags": [
          "Billing Expense"
        ],
        "description": "Get all expenses on a single project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/expenses/{expense_id}.json": {
      "get": {
        "summary": "Get a single expense",
        "tags": [
          "Billing Expense"
        ],
        "description": "Get a single expense\n",
        "parameters": [
          {
            "name": "expense_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a single expense",
        "tags": [
          "Billing Expense"
        ],
        "description": "Update a single expense\n",
        "parameters": [
          {
            "name": "expense_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete a single expense",
        "tags": [
          "Billing Expense"
        ],
        "description": "Delete a single expense\n",
        "parameters": [
          {
            "name": "expense_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/invoices/{invoice_id}/lineitems.json": {
      "put": {
        "summary": "Add an unbilled expense to an Invoice",
        "tags": [
          "Billing Expense"
        ],
        "description": "Add an unbilled expense to an Invoice\n",
        "parameters": [
          {
            "name": "invoice_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/boards/columns.json": {
      "post": {
        "summary": "Create a new Column",
        "tags": [
          "Boards"
        ],
        "description": "Allows you to create a new Column in your Boards view. The following colours can be used when creating Columns\n        #27AE60, #99DF72, #1ABC9C, #6866D0, #8E44AD, #0AD2F5, #3498DB, #3D82DE, #C0392B, #E74C3C, #A94136, #660A00, #F39C12, #F1C40F, #34495E, #7F8C8D, #D35400, #B49255, #D870AD, #BDC3C7, #9B59B6\n        \n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "The page number to get (Default : 1)",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The number of records to return per page",
            "in": "query",
            "required": false
          },
          {
            "name": "showDeleted",
            "type": "integer",
            "description": "Show deleted Columns in the API response or not (Default : 0)",
            "in": "query",
            "required": false
          },
          {
            "name": "deletedAfterDate",
            "type": "date",
            "description": "Show Columns deleted after a given date",
            "in": "query",
            "required": false
          },
          {
            "name": "updatedAfterDate",
            "type": "date",
            "description": "Show Columns updated after a given date",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "get": {
        "summary": "List Columns",
        "tags": [
          "Boards"
        ],
        "description": "Allows you to list all existing Columns in your Boards view\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/boards/columns/{column_id}.json": {
      "delete": {
        "summary": "Delete a Column",
        "tags": [
          "Boards"
        ],
        "description": "Remove a Column from your boards view\n",
        "parameters": [
          {
            "name": "column_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/boards/columns/{column_id}/cards.json": {
      "post": {
        "summary": "Add a Task from the Backlog to a Column",
        "tags": [
          "Boards"
        ],
        "description": "Add a task from your list of Tasks in to a Column\n",
        "parameters": [
          {
            "name": "column_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "List Cards in a Column",
        "tags": [
          "Boards"
        ],
        "description": "List the existing Cards inside a Column\n",
        "parameters": [
          {
            "name": "column_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "The page number to get",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The number of records to return per page",
            "in": "query",
            "required": false
          },
          {
            "name": "showDeleted",
            "type": "boolean",
            "description": "Show deleted Cards in the API response or not",
            "in": "query",
            "required": false
          },
          {
            "name": "searchTerm",
            "type": "string",
            "description": "An optional term to filter down to Cards containing this text in the Cards name",
            "in": "query",
            "required": false
          },
          {
            "name": "responsible-party-ids",
            "type": "integer",
            "description": "",
            "in": "query",
            "required": false
          },
          {
            "name": "deletedAfterDate",
            "type": "date",
            "description": "Show Cards deleted after a given date",
            "in": "query",
            "required": false
          },
          {
            "name": "updatedAfterDate",
            "type": "date",
            "description": "Show Cards updated after a given date",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/boards/columns/cards/{card_id}/move.json": {
      "put": {
        "summary": "Move a Card",
        "tags": [
          "Boards"
        ],
        "description": "Move a Card from one Column to another\n",
        "parameters": [
          {
            "name": "card_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/boards/columns/cards/{card_id}.json": {
      "put": {
        "summary": "Edit a Card",
        "tags": [
          "Boards"
        ],
        "description": "Edit the details of a Card\n",
        "parameters": [
          {
            "name": "card_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Remove a Card",
        "tags": [
          "Boards"
        ],
        "description": "Remove a Card from a Column (that task isn't deleted from the Tasklist)\n",
        "parameters": [
          {
            "name": "card_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/messageCategories.json": {
      "post": {
        "summary": "Creating Categories",
        "tags": [
          "Message Categories"
        ],
        "description": "A new category will be created and attached to your specified project ID.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieving all of a Projects Categories",
        "tags": [
          "Message Categories"
        ],
        "description": "All the message categories for your project will be returned.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messageCategories/{category_id}.json": {
      "get": {
        "summary": "Retrieve a Single Category",
        "tags": [
          "Message Categories"
        ],
        "description": "Will return a category on its own; this is identified by its integer ID.\n",
        "parameters": [
          {
            "name": "category_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Updating a Category",
        "tags": [
          "Message Categories"
        ],
        "description": "Using the integer ID given, it will update an already existing category.\n",
        "parameters": [
          {
            "name": "category_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a Category",
        "tags": [
          "Message Categories"
        ],
        "description": "Again using the specified integer ID, this will delete the appropriate category. However, categories can only be deleted when they contain no elements..\n",
        "parameters": [
          {
            "name": "category_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/fileCategories.json": {
      "post": {
        "summary": "Creating Categories",
        "tags": [
          "File Category"
        ],
        "description": "A new category will be created and attached to your specified project ID.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieving all of a Projects Categories",
        "tags": [
          "File Category"
        ],
        "description": "All the file categories for your project will be returned.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/fileCategories/{id}.json": {
      "get": {
        "summary": "Retrieve a Single Category",
        "tags": [
          "File Category"
        ],
        "description": "Will return a category on its own; this is identified by its integer ID.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Updating a Category",
        "tags": [
          "File Category"
        ],
        "description": "Using the integer ID given, it will update an already existing category.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a Category",
        "tags": [
          "File Category"
        ],
        "description": "Again using the specified integer ID, this will delete the appropriate category. However, categories can only be deleted when they contain no elements..\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/notebookCategories.json": {
      "post": {
        "summary": "Creating Categories",
        "tags": [
          "Notebook Category"
        ],
        "description": "A new category will be created and attached to your specified project ID.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieving all of a Projects Categories",
        "tags": [
          "Notebook Category"
        ],
        "description": "All the notebook categories for your project will be returned.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebookCategories/{id}.json": {
      "get": {
        "summary": "Retrieve a Single Category",
        "tags": [
          "Notebook Category"
        ],
        "description": "Will return a category on its own; this is identified by its integer ID.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Updating a Category",
        "tags": [
          "Notebook Category"
        ],
        "description": "Using the integer ID given, it will update an already existing category.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a Category",
        "tags": [
          "Notebook Category"
        ],
        "description": "Again using the specified integer ID, this will delete the appropriate category. However, categories can only be deleted when they contain no elements.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/linkCategories.json": {
      "post": {
        "summary": "Creating categories",
        "tags": [
          "Link Category"
        ],
        "description": "A new category will be created and attached to your specified project ID.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieving all of a projects link categories",
        "tags": [
          "Link Category"
        ],
        "description": "All the link categories for your project will be returned.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/linkCategories/{id}.json": {
      "get": {
        "summary": "Retrieve a single category",
        "tags": [
          "Link Category"
        ],
        "description": "Will return a category on its own; this is identified by its integer ID.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Updating a category",
        "tags": [
          "Link Category"
        ],
        "description": "Using the integer ID given, it will update an already existing category.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a Category",
        "tags": [
          "Link Category"
        ],
        "description": "Again using the specified integer ID, this will delete the appropriate category. However, categories can only be deleted when they contain no elements.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projectcategories.json": {
      "post": {
        "summary": "Creating Project Categories",
        "tags": [
          "Project Categories"
        ],
        "description": "A new project category will be created\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projectCategories/{id}.json": {
      "get": {
        "summary": "Retrieve a single Project Category",
        "tags": [
          "Project Categories"
        ],
        "description": "Will return a category on its own; this is identified by its integer ID.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Updating a Project Category",
        "tags": [
          "Project Categories"
        ],
        "description": "Using the integer ID given, it will update an already existing category.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a Project Category",
        "tags": [
          "Project Categories"
        ],
        "description": "Again using the specified integer ID, this will delete the appropriate category. However, categories can only be deleted when they contain no elements.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projectCategories.json": {
      "get": {
        "summary": "Retrieve all Project Categories",
        "tags": [
          "Project Categories"
        ],
        "description": "Will return all project categories\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/{resource}/{resource_id}/comments.json": {
      "get": {
        "summary": "Retreiving Recent Comments",
        "tags": [
          "Comments"
        ],
        "description": "Retreiving Recent Comments\n",
        "parameters": [
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "The page number to get",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The number of records to return per page",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Creating a Comment - Important Note",
        "tags": [
          "Comments"
        ],
        "description": "Creates a new comment, associated with the particular resource. When named in the URL, it can be either posts, tasks, milestones, notebooks, links or fileversions.\n\n        Important Note : When creating a comment on a file, the {resource} is fileversions and the {resource_id} is the File Version ID   \n\n        The notify parameter is set to \"\"\"\" in the example below so no one will be notified of your new comment. This parameter can be set to all to send an email to anyone assigned to the task or following it. You can also use a list of Teamwork User IDs to only notify certain people, but you can't notify yourself.\n\n        Attaching Files : To attach new files use the pendingFileAttachments option (see the uploading files section for more info).\n\n        Content Type: By default comments are created as plain text. To create a HTML comment, pass \"\"content-type\"\":\"\"html\"\" and put your HTML formatted content in the \"\"body\"\" field.\n\n        Post as another user: You can pass \"\"author-id\"\" as a numeric userId to post the comment as another user if you are an administrator.\n",
        "parameters": [
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/comments/{comment_id}.json": {
      "get": {
        "summary": "Retrieving a Specific Comment",
        "tags": [
          "Comments"
        ],
        "description": "This will get a comment based on the comment's ID\n",
        "parameters": [
          {
            "name": "comment_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/comments/{id}.json": {
      "put": {
        "summary": "Updating a comment",
        "tags": [
          "Comments"
        ],
        "description": "Update a specific comment. This can be used to edit the content of an existing comment.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroying a comment",
        "tags": [
          "Comments"
        ],
        "description": "Fairly self explanatory, deletes the comment from the given ID.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/comments/{id}/markread.json": {
      "put": {
        "summary": "Mark a comment as read",
        "tags": [
          "Comments"
        ],
        "description": "Marks a particular comment as read from the point of view of the authenticated user.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/calendarevents.json": {
      "get": {
        "summary": "Get Events",
        "tags": [
          "Calendar Events"
        ],
        "description": "This call will return all calendar events that the current user can see in the provided date range.\n\n        Optional parameters\n        showDeleted=true - Whether to include deleted events\n        updatedAfterDate=YYYYMMDDHHMMSS - Only return events updated after a certain datetime\n        eventTypeId - Only return events with a given eventTypeId (Numeric only - default 0)\n\n        Pagination:\n        By default we'll send back 250 records per page. Inspect the Response Headers for the following values:\n        X-Page (The current page being returned)\n        X-Pages (The total number of pages available)\n        X-Records (The total number of items available\n        You can request a specific page by calling the same API call and adding the parameter &page=n where n is the page you want. e.g: &page=2 for page 2, &page=5 for page 5.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "showDeleted",
            "type": "boolean",
            "description": "Whether to include deleted events",
            "in": "query",
            "required": false
          },
          {
            "name": "updatedAfterDate",
            "type": "date",
            "description": " Only return events updated after a certain datetime (Format - YYYYMMDDHHMMSS)",
            "in": "query",
            "required": false
          },
          {
            "name": "eventTypeId",
            "type": "integer",
            "description": "Only return events with a given eventTypeId (Numeric only - default 0)",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/calendarevents/{event_id}.json": {
      "get": {
        "summary": "Get an Event",
        "tags": [
          "Calendar Events"
        ],
        "description": "Returns details about 1 specific event.\n",
        "parameters": [
          {
            "name": "event_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create an event",
        "tags": [
          "Calendar Events"
        ],
        "description": "POST/calendarevents.json\n        Create a calendar event.\n\n        Notes\n        \"start\" and \"end\" are in the format YYYY-MM-DDTHH:MM:SS (e.g: 2015-06-09T14:00:00 - always 24 hr)\n        \"start\" and \"end\" should be sent in the current users timezone \n        \"privacy\" - default is \"company\"\n        \"company\"\n        \"personal\"\n        \"project\" - If passing \"project\" you need to send \"project-id\" along with \"type\"\n        \n        \n        Notes - recurring events can be set using defining frequency\n        'frequency' can be one of the following: weekly, weekdays, monthly, yearly, every2weeks, every3weeks, every4weeks, every2months, every3months, every4months, every6months\n        \n",
        "parameters": [
          {
            "name": "event_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "put": {
        "summary": "Edit an event",
        "tags": [
          "Calendar Events"
        ],
        "description": "Edit a calendar event.\n\n        Notes\n        \"start\" and \"end\" are in the format YYYY-MM-DDTHH:MM:SS (e.g: 2015-06-09T14:00:00 - always 24 hr)\n        \"start\" and \"end\" should be sent in the current users timezone \n        \"privacy\" - default is \"company\"\n        \"company\"\n        \"personal\"\n        \"project\" - If passing \"project\" you need to send \"project-id\" along with \"type\"\n",
        "parameters": [
          {
            "name": "event_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete event",
        "tags": [
          "Calendar Events"
        ],
        "description": "Deletes the calendar event.\n",
        "parameters": [
          {
            "name": "event_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/calendareventtypes.json": {
      "get": {
        "summary": "Get event types",
        "tags": [
          "Calendar Events"
        ],
        "description": "Returns details about event types.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/companies.json": {
      "post": {
        "summary": "Create Company",
        "tags": [
          "Companies"
        ],
        "description": "This call will create a company entry. The Id of the new company is returned in companyId. You can just post the name if you wish, the rest of the fields are optional.\n\n        For country codes, see the Country Codes Reference.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "get": {
        "summary": "Retrieve Companies",
        "tags": [
          "Companies"
        ],
        "description": "The requesting user is returned a list of companies available to them.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "type": "integer",
            "description": "Optionally, you can set the page from which to start retrieving results. This is usually used in conjunction with the parameter pageSize. (Default - 1)",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The amount of companies returned can be limited using this parameter. Normally used in conjunction with the page parameter.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/companies/{company_id}.json": {
      "put": {
        "summary": "Update Company",
        "tags": [
          "Companies"
        ],
        "description": "Modifies the company data - name, address, phone number etc. All fields are optional. For country codes, see the Country Codes Reference.\n",
        "parameters": [
          {
            "name": "company_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete Company",
        "tags": [
          "Companies"
        ],
        "description": "This call will delete the company.\n",
        "parameters": [
          {
            "name": "company_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieve a Single Company",
        "tags": [
          "Companies"
        ],
        "description": "Uses the ID specified to return a single company\n",
        "parameters": [
          {
            "name": "company_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/companies.json": {
      "get": {
        "summary": "Retrieving Companies within a Project",
        "tags": [
          "Companies"
        ],
        "description": "All of the companies within the specified project are returned\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/files.json": {
      "get": {
        "summary": "List Files on a Task",
        "tags": [
          "Files"
        ],
        "description": "This lets you query the list of files for a Task.\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/files.json": {
      "get": {
        "summary": "List Files on a Project",
        "tags": [
          "Files"
        ],
        "description": "This lets you query the list of files for a project.\n\n        If a file is an image, there will be an additional key called thumbURL in the response with a link to the image thumbnail.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "post": {
        "summary": "Add a File to a Project",
        "tags": [
          "Files"
        ],
        "description": "This call adds a file to the project.\n\n        The file must have been uploaded already and you must have the pendingFileRef  handle - see uploading files\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/files/{file_id}.json": {
      "get": {
        "summary": "Get a Single File",
        "tags": [
          "Files"
        ],
        "description": "This returns all details about an individual file. Crucially - this call also returns the download URL which is valid only for an hour.\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Add a new File Version to a File",
        "tags": [
          "Files"
        ],
        "description": "This call adds a new file version to an existing file.\n\n        The file version file must have been uploaded already and you must have the pendingFileRef handle - see uploading files\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete a File from a Project",
        "tags": [
          "Files"
        ],
        "description": "This call deletes a file from a project.\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/files/{file_id}/sharedlink.json": {
      "get": {
        "summary": "Get a short URL for sharing a file",
        "tags": [
          "Files"
        ],
        "description": "This call will provide a short link to a file to make it easier to share, in the format of http://twk.pm/xxxxxx\n        If you have multiple versions of a file, you can request a short link to other versions by appending 'version'\n\n        'version' is optional and is set to 1 by default.\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "version",
            "type": "int",
            "in": "path",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/files/{file_id}/copy.json": {
      "put": {
        "summary": "Copy a file that already exists in one project in to another project.",
        "tags": [
          "Files"
        ],
        "description": "This will allow you to COPY a file that already exists in one project in to another project.\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/files/{file_id}/move.json": {
      "put": {
        "summary": "Move a file that already exists in one project in to another project.",
        "tags": [
          "Files"
        ],
        "description": "This will allow you to MOVE a file that already exists in one project in to another project.\n",
        "parameters": [
          {
            "name": "file_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/pendingfiles.json": {
      "post": {
        "summary": "Files Uploading",
        "tags": [
          "Files - Uploading"
        ],
        "description": "To attach files to a project you first need to upload the file and receive a pendingFileRef. You can then use the pendingFileRef to attach the file to a message or directly to the files page of the project.\n\n        Step 1. Upload the file\n        Send your file to POST /pendingfiles.json using the FORM field file.\n        You will still need to authenticate yourself by passing your API token.\n        If the upload is successful, you will get back something like:\n\n        Step 2: Use the reference handle in your API calls\n        Simply use the file handle in the ref field when making the add file or add message API Calls.\n        The file handle looks something like tf_F61F7DF3F5B4C5B6 and is sent to the messages or files API calls as pendingFileRef.\n\n        Notes\n        As soon as you link the file to the project by making an API call, then Pending-File Handle is no longer valid. \n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/posts.json": {
      "post": {
        "summary": "Create a message",
        "tags": [
          "Messages"
        ],
        "description": "This will create a new message. Also, you have the option of sending a notification to a list of people you specify.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieve Latest Messages",
        "tags": [
          "Messages"
        ],
        "description": "For the project ID supplied, will return the 25 most recent messages\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/posts/{id}.json": {
      "get": {
        "summary": "Retrieve a Single Message",
        "tags": [
          "Messages"
        ],
        "description": "Uses the given messsage ID to retrieve a message\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update message",
        "tags": [
          "Messages"
        ],
        "description": "Updates an existing message, optionally sending notifications to a selected list of people.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroy message",
        "tags": [
          "Messages"
        ],
        "description": "Deletes the message including all comments etc\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/cat/{category_id}/posts.json": {
      "get": {
        "summary": "Retrieve Messages by Category",
        "tags": [
          "Messages"
        ],
        "description": "As before, will return you the most recent 25 messages, this time limited by project and category.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/posts/archive.json": {
      "get": {
        "summary": "Get archived messages",
        "tags": [
          "Messages"
        ],
        "description": "Rather than the full message, this returns a summary record for each message in the specified project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/cat/{category_id}/posts/archive.json": {
      "get": {
        "summary": "Get archived messages by category",
        "tags": [
          "Messages"
        ],
        "description": "As above, but returns only the posts in the given category\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messages/{id}/archive.json": {
      "put": {
        "summary": "Archive a message",
        "tags": [
          "Messages"
        ],
        "description": "Archives the message including all replies etc\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messages/{id}/unarchive.json": {
      "put": {
        "summary": "Un-archive a message",
        "tags": [
          "Messages"
        ],
        "description": "Restores the message from the Archive including all replies etc\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messages/{id}/markread.json": {
      "put": {
        "summary": "Mark Message Read",
        "tags": [
          "Messages"
        ],
        "description": "Marks a specific message as read by the current authenticated user\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messages/{message_id}/messageReplies.json": {
      "post": {
        "summary": "Create a Message Reply",
        "tags": [
          "Messages Replies"
        ],
        "description": "This will create a new message. Also, you have the option of sending a notification to a list of people you select.people.\n",
        "parameters": [
          {
            "name": "message_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messageReplies/{id}.json": {
      "get": {
        "summary": "Retrieve a Single Message Reply",
        "tags": [
          "Messages Replies"
        ],
        "description": "Uses the given messsage ID to retrieve a message\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update Message Reply",
        "tags": [
          "Messages Replies"
        ],
        "description": "Updates an existing message body only.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroy Message Reply",
        "tags": [
          "Messages Replies"
        ],
        "description": "Deletes the message including all comments etc\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/messages/{id}/replies.json": {
      "get": {
        "summary": "Retrieve Replies to a Message",
        "tags": [
          "Messages Replies"
        ],
        "description": "Uses the given messsage ID to retrieve a all replies to a message specified in the url.\n        By default 20 records are returned at a time. You can pass \"\"page\"\" and \"\"pageSize\"\" to change this:\n        eg. GET /messages/54/replies.json?page=2&pageSize=50.\n\n        The following headers are returned:\n        X-Records - The total number of replies\n        X-Pages - The total number of pages\n        X-Page - The page you requested\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "Optionally, you can set the page from which to start retrieving results. This is usually used in conjunction with the parameter pageSize. (Default - 1)",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The amount of companies returned can be limited using this parameter. Normally used in conjunction with the page parameter.",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/messageReplies/{id}/markread.json": {
      "put": {
        "summary": "Mark Message Reply Read",
        "tags": [
          "Messages Replies"
        ],
        "description": "Marks a specific message reply as read by the current authenticated user\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/milestones.json": {
      "get": {
        "summary": "List All Milestones",
        "tags": [
          "Milestones"
        ],
        "description": "Lists all milestones on projects that the authenticated user is associated with. You can set the \"find\" option to return only those milestones that are incomplete, completed, upcoming or late. By default all milestones will be returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "type": "integer",
            "description": "Optionally, you can set the page from which to start retrieving results. This is usually used in conjunction with the parameter pageSize. (Default - 1)",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The amount of companies returned can be limited using this parameter. Normally used in conjunction with the page parameter.",
            "in": "query",
            "required": false
          },
          {
            "name": "getProgress",
            "type": "boolean",
            "description": "Pass getProgress=true to return a field percentageComplete",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/milestones.json": {
      "get": {
        "summary": "List Milestones on a Project",
        "tags": [
          "Milestones"
        ],
        "description": "This lets you query the list of milestones for a project. You can set the \"find\" option to return only those milestones that are incomplete, completed, upcoming or late. By default all milestones will be returned.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "getProgress",
            "type": "boolean",
            "description": "Pass getProgress=true to return a field percentageComplete",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a Single Milestone",
        "tags": [
          "Milestones"
        ],
        "description": "This API call will create a single milestone.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/milestones/{milestone_id}.json": {
      "get": {
        "summary": "Get a Single Milestone",
        "tags": [
          "Milestones"
        ],
        "description": "This returns all details about an individual milestone.\n\n        Additional Parameters\n        Pass getProgress=true to return a field percentageComplete\n        Pass &showTaskLists=true to include a list of task lists associated with this milestone\n        If you pass &showTaskLists=true you can also pass &showTasks=true to include a list of tasks in each list\n",
        "parameters": [
          {
            "name": "milestone_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "getProgress",
            "type": "boolean",
            "description": "Pass getProgress=true to return a field percentageComplete",
            "in": "query",
            "required": false
          },
          {
            "name": "showTaskLists",
            "type": "boolean",
            "description": "Pass &showTaskLists=true to include a list of task lists associated with this milestone",
            "in": "query",
            "required": false
          },
          {
            "name": "showTasks",
            "type": "boolean",
            "description": "If you pass &showTaskLists=true you can also pass &showTasks=true to include a list of tasks in each list",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "put": {
        "summary": "Update",
        "tags": [
          "Milestones"
        ],
        "description": "Modifies a single milestone. You can use this to shift the deadline of a single milestone, and optionally shift the deadlines of subsequent milestones as well.\n",
        "parameters": [
          {
            "name": "milestone_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "tags": [
          "Milestones"
        ],
        "description": "Deletes the milestone.\n",
        "parameters": [
          {
            "name": "milestone_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/milestones/{id}/complete.json": {
      "put": {
        "summary": "Complete",
        "tags": [
          "Milestones"
        ],
        "description": "Marks the specified milestone as complete. Returns Status 200 OK.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/milestones/{id}/uncomplete.json": {
      "put": {
        "summary": "Uncomplete",
        "tags": [
          "Milestones"
        ],
        "description": "Marks the specified milestone as uncomplete. Returns Status 200 OK.\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebooks.json": {
      "get": {
        "summary": "List All Notebooks",
        "tags": [
          "Notebooks"
        ],
        "description": "Lists all notebooks on projects that the authenticated user is associated with. By default, the actual notebook HTML content is not returned. \n\n        You can pass includeContent=true to return the notebook HTML content with the notebook data\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/notebooks.json": {
      "get": {
        "summary": "List Notebooks on a Project",
        "tags": [
          "Notebooks"
        ],
        "description": "This lets you query the list of notebooks for a project. \n        By default, the actual notebook HTML content is not returned.\n\n        You can pass includeContent=true to return the notebook HTML content with the notebook data\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "includeContent",
            "type": "boolean",
            "in": "query",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "post": {
        "summary": "Create a Single Notebook",
        "tags": [
          "Notebooks"
        ],
        "description": "This command will create a single notebook.\n        Content must be valid XHTML\n\n        You not not need to include <html>, <head> or <body> tags\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/notebookCategories/{id}/notebooks.json": {
      "get": {
        "summary": "List Notebooks in a specific category",
        "tags": [
          "Notebooks"
        ],
        "description": "This lets you query the list of notebooks for a specific category. \n        By default, the actual notebook HTML content is not returned.\n        You can pass includeContent=true to return the notebook HTML content with the notebook data\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "includeContent",
            "type": "boolean",
            "in": "query",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/notebooks/{notebook_id}.json": {
      "get": {
        "summary": "Get a Single Notebook",
        "tags": [
          "Notebooks"
        ],
        "description": "This returns all details about an individual notebook. HTML content is always returned on this call.\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a Single Notebook",
        "tags": [
          "Notebooks"
        ],
        "description": "This command will update a single notebook.\n        Content must be valid XHTML\n\n        You not not need to include <html>, <head> or <body> tags\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete a Single Notebook",
        "tags": [
          "Notebooks"
        ],
        "description": "Deletes the notebook and all versions.\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebooks/{notebook_id}/lock.json": {
      "put": {
        "summary": "Lock a Single Notebook For Editing",
        "tags": [
          "Notebooks"
        ],
        "description": "Locks the notebook and all versions for editing.\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebooks/{notebook_id}/unlock.json": {
      "put": {
        "summary": "Unlock a Single Notebook",
        "tags": [
          "Notebooks"
        ],
        "description": "Unlocks a locked notebook so it can be edited again.\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebooks/{notebook_id}/copy.json": {
      "put": {
        "summary": "Copy a Notebook to another Project",
        "tags": [
          "Notebooks"
        ],
        "description": "Copies the notebook to a chosen Project\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/notebooks/{notebook_id}/move.json": {
      "put": {
        "summary": "Move a Notebook to another Project",
        "tags": [
          "Notebooks"
        ],
        "description": "Moves the notebook to a chosen Project and removed it from its current Project\n",
        "parameters": [
          {
            "name": "notebook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people.json": {
      "post": {
        "summary": "Add a new user",
        "tags": [
          "People"
        ],
        "description": "Creates a new user account\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Get people",
        "tags": [
          "People"
        ],
        "description": "All people visible to the user will be returned, including the user themselves\nBy default 200 records are returned at a time.\nYou can pass page and pageSize to change this: eg. GET /people.json?page=2&pageSize=50\n\nThe following headers are returned:\nX-Records - The total number of people\nX-Pages - The total number of pages\nX-Page - The page you requested\n\nAdditional Optional Parameters\nemailaddress : string: Pass this parameter to check if a user exists by email address\nfullprofile : boolean: Pass this parameter to return private notes for users\nreturnProjectIds: boolean: Pass this parameter to return the ProjectIds the user is a member of\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/people/{id}.json": {
      "put": {
        "summary": "Edit user",
        "tags": [
          "People"
        ],
        "description": "Updates a user account\n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "tags": [
          "People"
        ],
        "description": "Deletes the given user account. \n",
        "parameters": [
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/me.json": {
      "get": {
        "summary": "Get Current User Details",
        "tags": [
          "People"
        ],
        "description": "Returns the details for the account you're currently logged in with\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/stats.json": {
      "get": {
        "summary": "Current User Summary Stats",
        "tags": [
          "People"
        ],
        "description": "Returns summary details for the user including Tasks today/late/upcoming, Permissions, Events, Milestones, Projects\n\nAdditional Optional Parameters\ngetPermissions  boolean Return Permissons information in the response\nonlymyprojects  integer Summary of the users Projects only or all Projects\nonlyMyEvents boolean Summary of the users Events only or all Events\neventsInNext integer Number of days to look ahead for Events\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "getPermissions",
            "type": "boolean",
            "description": "Return Permissons information in the response",
            "in": "query",
            "required": false
          },
          {
            "name": "onlymyprojects",
            "type": "integer",
            "description": "Summary of the users Projects only or all Projects",
            "in": "query",
            "required": false
          },
          {
            "name": "onlyMyEvents",
            "type": "boolean",
            "description": "Summary of the users Events only or all Events",
            "in": "query",
            "required": false
          },
          {
            "name": "eventsInNext",
            "type": "integer",
            "description": "Number of days to look ahead for Events",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/people.json": {
      "get": {
        "summary": "Get all People (within a Project)",
        "tags": [
          "People"
        ],
        "description": "Retrieves all of the people in a given project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "Page number to show",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "How many rows to show per page",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Add/Remove multiple people to/from a project",
        "tags": [
          "Permissions"
        ],
        "description": "Add or Remove multiple people to or from a project. \n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/companies/{company_id}/people.json": {
      "get": {
        "summary": "Get People (within a Company)",
        "tags": [
          "People"
        ],
        "description": "Retreives the details for all the people from the submitted company (excluding those you don't have permission to see)\n",
        "parameters": [
          {
            "name": "company_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/{person_id}.json": {
      "get": {
        "summary": "Retrieve a Specific Person",
        "tags": [
          "People"
        ],
        "description": "Retrieves the user details for the ID submitted\n",
        "parameters": [
          {
            "name": "person_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Unassign a user from all Tasks",
        "tags": [
          "People"
        ],
        "description": "This will remove the user from any Tasks they have been assigned to.\n",
        "parameters": [
          {
            "name": "person_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/APIKeys.json": {
      "get": {
        "summary": "Retrieve a API Keys for all people on account",
        "tags": [
          "People"
        ],
        "description": "Retrieves the API keys for all people on your Teamwork account.\n\nNote: This can only be called by the user authenticated as the Site Administrator\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/me/status.json": {
      "post": {
        "summary": "Create My Status",
        "tags": [
          "People-Status"
        ],
        "description": "This call will create a status entry. The ID of the new status is returned in header id. \n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieve my Status",
        "tags": [
          "People-Status"
        ],
        "description": "Returns the latest status post for a user\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/{person_id}/status.json": {
      "post": {
        "summary": "Create Status for Others",
        "tags": [
          "People-Status"
        ],
        "description": "This call will create a status entry. The ID of the new status is returned in header id. \n",
        "parameters": [
          {
            "name": "person_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/me/status/{status_id}.json": {
      "put": {
        "summary": "Update Status Me",
        "tags": [
          "People-Status"
        ],
        "description": "Modifies a status post.\n",
        "parameters": [
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete My Status",
        "tags": [
          "People-Status"
        ],
        "description": "This call will delete a particular status message.\n",
        "parameters": [
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/status/{status_id}.json": {
      "put": {
        "summary": "Update Status by Status ID",
        "tags": [
          "People-Status"
        ],
        "description": "Modifies a status post.\n",
        "parameters": [
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete Status by Status Id",
        "tags": [
          "People-Status"
        ],
        "description": "This call will delete a particular status message.\n",
        "parameters": [
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/{person_id}/status/{status_id}.json": {
      "put": {
        "summary": "Update Status By person id and status id",
        "tags": [
          "People-Status"
        ],
        "description": "Modifies a status post.\n",
        "parameters": [
          {
            "name": "person_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete Status by Person and Status Id",
        "tags": [
          "People-Status"
        ],
        "description": "This call will delete a particular status message.\n",
        "parameters": [
          {
            "name": "person_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "status_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/{user_id}/": {
      "get": {
        "summary": "Retrieve a Persons Status",
        "tags": [
          "People-Status"
        ],
        "description": "Returns the latest status post for a user\n",
        "parameters": [
          {
            "name": "user_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/people/status.json": {
      "get": {
        "summary": "Retrieve Everybodys Status",
        "tags": [
          "People-Status"
        ],
        "description": "All of the latest status posts are returned for all users in the parent company.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/people/{user_id}.json": {
      "post": {
        "summary": "Add a new user to a project",
        "tags": [
          "Permissions"
        ],
        "description": "Add a user to a project. Default permissions setup in Teamwork will be used.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "user_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Remove a user from a project",
        "tags": [
          "Permissions"
        ],
        "description": "Removes a user from a project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "user_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Get a users permissions on a project",
        "tags": [
          "Permissions"
        ],
        "description": "Gets the details and permissions for a given user on a given project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "user_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a users permissions on a project",
        "tags": [
          "Permissions"
        ],
        "description": "Sets the permissions of a given user on a given project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "user_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects.json": {
      "post": {
        "summary": "Create Project",
        "tags": [
          "Projects"
        ],
        "description": "This call will create a single project.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Retrieve All Projects",
        "tags": [
          "Projects"
        ],
        "description": "Retrieves all accessible projects. Default returns your active projects. \n\nReturn projects by status\nBy default we send back only active projects. You can pass a status option to retrieve projects filtered by status (ALL, ACTIVE, ARCHIVED, CURRENT, LATE, COMPLETED)\n\nAn example\nGET /projects.json?status=ALL\nGET /projects.json?status=ARCHIVED\n\nReturn only updated projects\nYou can optionally append a date to the call to return only those projects recently updated. This is very useful if you are implementing local caching as you won't have to recheck everything therefore making your applicaton much faster.\nYou can pass in a date and/or a date with a time using the variables updatedAfterDate and updatedAfterTime.\n\nAn example\nGET /projects.json?updatedAfterDate=20100603\nGET /projects.json?updatedAfterDate=20100603&updatedAfterTime=15:21\n\nSorting results\nYou can pass orderby=name or orderby=companyName or orderby=lastActivityDate.\neg. GET /projects.json?orderby=lastActivityDate\n\nReturn only projects created after a certain point in time\nYou can optionally append a date to the call to return only those projects created after a certain point in time. You can pass in a date and/or a date with a time using the variables createdAfterDate and createdAfterTime.\n\nAn example\nGET /projects.json?createdAfterDate=20100603\nGET /projects.json?createdAfterDate=20100603&createdAfterTime=15:21\nReturn only projects in a certain category\nYou can pass a category ID so that you can return a list of Projects in a certain category only.\n\nAn example\nGET /projects.json?catId=12345\nAdditional Parameters\nYou can pass includePeople=true as an optional parameter to get an array of ID's of all people associated with each project included in the response under the field people\n\nPagination\nBy default we'll send back 500 project records per page. Inspect the Response Headers for the following values:\nX-Page (The current page being returned)\nX-Pages (The total number of pages available)\nX-Records (The total number of items available\n\nYou can request a specific page by calling the same API call and adding the parameter &page=n where n is the page you want. e.g: &page=2 for page 2, &page=5 for page 5.\nSee Projects GET in Data Reference\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "type": "string",
            "description": "By default we send back only active projects. You can pass a status option to retrieve projects filtered by status",
            "enum": [
              "ALL",
              "ACTIVE",
              "ARCHIVED",
              "CURRENT",
              "LATE",
              "COMPLETED"
            ],
            "in": "query",
            "required": false
          },
          {
            "name": "updatedAfterDate",
            "type": "string",
            "description": "You can pass in a date and/or a date with a time using the variables updatedAfterDate and updatedAfterTime. Eg: updatedAfterDate=20100603",
            "in": "query",
            "required": false
          },
          {
            "name": "updatedAfterTime",
            "type": "date",
            "description": "You can pass in a date and/or a date with a time using the variables updatedAfterDate and updatedAfterTime. Eg: updatedAfterTime=15:21",
            "in": "query",
            "required": false
          },
          {
            "name": "createdAfterDate",
            "type": "string",
            "description": "You can optionally append a date to the call to return only those projects created after a certain point in time. You can pass in a date and/or a date with a time using the variables createdAfterDate and createdAfterTime. Eg: createdAfterDate=20100603",
            "in": "query",
            "required": false
          },
          {
            "name": "createdAfterTime",
            "type": "date",
            "description": "You can optionally append a date to the call to return only those projects created after a certain point in time. You can pass in a date and/or a date with a time using the variables createdAfterDate and createdAfterTime. Eg: createdAfterTime=15:21",
            "in": "query",
            "required": false
          },
          {
            "name": "catId",
            "type": "integer",
            "description": "You can pass a category ID so that you can return a list of Projects in a certain category only. catId=12345",
            "in": "query",
            "required": false
          },
          {
            "name": "includePeople",
            "type": "boolean",
            "description": "You can pass includePeople=true as an optional parameter to get an array of ID's of all people associated with each project included in the response under the field people",
            "in": "query",
            "required": false
          },
          {
            "name": "orderby",
            "type": "string",
            "description": "By default we send back only active projects. You can pass a status option to retrieve projects filtered by status",
            "enum": [
              "name",
              "companyName",
              "lastActivityDate"
            ],
            "in": "query",
            "required": false
          },
          {
            "name": "page",
            "type": "integer",
            "description": "You can request a specific page by calling the same API call and adding the parameter &page=n where n is the page you want. e.g: &page=2 for page 2, &page=5 for page 5.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}.json": {
      "get": {
        "summary": "Retrieve a Single Project",
        "tags": [
          "Projects"
        ],
        "description": "Returns a single project identified by its integer ID\n\nAdditional Parameters:\nYou can pass includePeople=true as an optional parameter to get an array of ID's of all people associated with the requested project included in the response under the field people\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "includePeople",
            "type": "boolean",
            "description": "You can pass includePeople=true as an optional parameter to get an array of ID's of all people associated with each project included in the response under the field people",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "put": {
        "summary": "Update Project",
        "tags": [
          "Projects"
        ],
        "description": "Modifies a single project. \n\nYou can also use this call to update the logo of the project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete Project",
        "tags": [
          "Projects"
        ],
        "description": "Strangely enough, the call will delete the project.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/companies/{company_id}/projects.json": {
      "get": {
        "summary": "Retrieve projects assigned to a specific company",
        "tags": [
          "Projects"
        ],
        "description": "This will retrieve all of projects assigned to a particular company\n",
        "parameters": [
          {
            "name": "company_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/starred.json": {
      "get": {
        "summary": "Retrieve your Starred Projects",
        "tags": [
          "Projects"
        ],
        "description": "Surprisingly, this will retrieve all of your projects, which have been starred!\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/star.json": {
      "put": {
        "summary": "Star a project",
        "tags": [
          "Projects"
        ],
        "description": "Adds a project to your list of favourite projects.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/unstar.json": {
      "put": {
        "summary": "Unstar a project",
        "tags": [
          "Projects"
        ],
        "description": "Removes a project from your list of favourite projects.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/box.json": {
      "get": {
        "summary": "Read project Box folder and access",
        "tags": [
          "Projects"
        ],
        "description": "Lets you get the Box folder and Access Level on a particular project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Set project Box folder and access",
        "tags": [
          "Projects"
        ],
        "description": "Lets you set the Box folder and Access Level on a particular project\n\nParameters\n\nfolder-access  string  Any one of ownerCompanyAdmins, alladmins, allAdminsAndOwnerCompany, allPeopleOnProject\nenabled  boolean\nfolder-id  string A valid Box Folder Resource ID\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/googleDrive.json": {
      "get": {
        "summary": "Read project Google Drive folder and access",
        "tags": [
          "Projects"
        ],
        "description": "Lets you get the Google Drive folder and Access Level on a particular project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Set project Google Drive folder and access",
        "tags": [
          "Projects"
        ],
        "description": "Lets you set the Google Drive folder and Access Level on a particular project\n\nParameters\n\nfolder-access  string  Any one of ownerCompanyAdmins, alladmins, allAdminsAndOwnerCompany, allPeopleOnProject\nenabled  boolean\nfolder-id  string A valid Google Drive Folder Resource ID\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/rates.json": {
      "get": {
        "summary": "Get Project Rates",
        "tags": [
          "Projects"
        ],
        "description": "Lets you see the hourly rate(s) set for People on a single Project\n\nParameters\npage integer  The page number to show\npageSize integer The number of tesults to show per page\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "Page number to show",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "How many rows to show per page",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "post": {
        "summary": "Set Project Rates",
        "tags": [
          "Projects"
        ],
        "description": "This allows you to set Rates for people on a Project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/roles.json": {
      "get": {
        "summary": "List Roles on a Project",
        "tags": [
          "Project Roles"
        ],
        "description": "This lets you query the list of roles set on a project. \n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Add a role to a project",
        "tags": [
          "Project Roles"
        ],
        "description": "Add a role to a specific project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/roles/{role_id}.json": {
      "put": {
        "summary": "Update a role on a project",
        "tags": [
          "Project Roles"
        ],
        "description": "Update a specific role\n",
        "parameters": [
          {
            "name": "role_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete a role",
        "tags": [
          "Project Roles"
        ],
        "description": "Delete a role\n",
        "parameters": [
          {
            "name": "role_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "get": {
        "summary": "Get an individual role",
        "tags": [
          "Project Roles"
        ],
        "description": "Get an individual role\n",
        "parameters": [
          {
            "name": "role_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/emailaddress.json": {
      "get": {
        "summary": "Get Project Email Address",
        "tags": [
          "Project Email Addresses"
        ],
        "description": "This call will get the unique project email addresses for sending items to a project via a project member.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update Project Email Address",
        "tags": [
          "Project Email Addresses"
        ],
        "description": "This call will update the unique project email addresses used to send items to a project via a project member.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/links.json": {
      "get": {
        "summary": "List All Links",
        "tags": [
          "Links"
        ],
        "description": "Lists all links on projects that the authenticated user is associated with. \n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/links.json": {
      "get": {
        "summary": "List Links on a Project",
        "tags": [
          "Links"
        ],
        "description": "This lets you query the list of links for a project. \n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a Single Link",
        "tags": [
          "Links"
        ],
        "description": "This command will create a single link.\ncode must be valid Embed Code, IFrame Code or a URL\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/links/{link_id}.json": {
      "get": {
        "summary": "Get a Single Link",
        "tags": [
          "Links"
        ],
        "description": "This returns all details about an individual link. \n",
        "parameters": [
          {
            "name": "link_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a Single Link",
        "tags": [
          "Links"
        ],
        "description": "This command will update a single link.\ncode must be valid Embed Code, IFrame Code or a URL\n",
        "parameters": [
          {
            "name": "link_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete a Single Link",
        "tags": [
          "Links"
        ],
        "description": "Deletes the link specified by link_id.\n",
        "parameters": [
          {
            "name": "link_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/risks.json": {
      "get": {
        "summary": "Retrieve all Risks in a Project",
        "tags": [
          "Risks"
        ],
        "description": "Get all Risks in a Project\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/search.json": {
      "get": {
        "summary": "Search",
        "tags": [
          "Search Projects"
        ],
        "description": "Perform a search in one of several Projects settings.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchFor",
            "type": "string",
            "description": "The resource you would like to search within, for example 'tasks'",
            "in": "query",
            "enum": [
              "projects",
              "notebooks",
              "files",
              "tasks",
              "tasklists",
              "milestones",
              "messages",
              "links",
              "events",
              "people",
              "companies",
              "taskComments",
              "fileComments",
              "notebookComments",
              "milestoneComments",
              "linkComments"
            ],
            "required": false
          },
          {
            "name": "searchTerm",
            "type": "string",
            "description": "The word or phrase you'd like to search for",
            "in": "query",
            "required": false
          },
          {
            "name": "projectId",
            "type": "integer",
            "description": "The ProjectID you would like to search within",
            "in": "query",
            "required": false
          },
          {
            "name": "sortOrder",
            "type": "string",
            "description": "name' or 'dateupdated' to decide the order of the search results",
            "in": "query",
            "required": false
          },
          {
            "name": "includArchivedProjects",
            "type": "boolean",
            "description": "True or False to include archived items or not.",
            "in": "query",
            "required": false
          },
          {
            "name": "includeCompletedItems",
            "type": "boolean",
            "description": "True or False to include Completed items or not",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "Define number of results to show, for example 20",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/time_entries.json": {
      "get": {
        "summary": "Retrieve All Time Entries across all projects",
        "tags": [
          "Time Tracking"
        ],
        "description": "To search for a resource with an attached tag of 'My Test', do the following:\n\nTo search for a Tag, you use a hash symbol and square brackets in the searchTerm, like this : #[My Test]\nThen where performing a query to the API, you need to ASCII encode the # [ ] symbols, so a GET query to the API will look like this:\n\nGET to /search.json?searchFor=messages&searchTerm=%23%5BMy+Test%5D\nIn the above example, #, [ and ] have been changed to %23, %5B and %5D respectively.\nResources that can be Searched:\nprojects\nnotebooks\nfiles\ntasks\ntasklists\nmilestones\nmessages\nlinks\nevents\npeople\ncompanies\ntaskComments\nfileComments\nnotebookComments\nmilestoneComments\nlinkComments\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "type": "integer",
            "description": "The page to start retrieving entries from ( e.g: page=1 gives records 1 - 500. page=2 gives records 501-1001 etc)",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(YYYYMMDD) - The start date to retrieve from",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(YYYYMMDD) - The end date to retrieve to",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "sortby",
            "type": "string",
            "enum": [
              "date",
              "user",
              "task",
              "tasklist",
              "project",
              "company",
              "dateupdated"
            ],
            "description": "One of the following: date, user, task, tasklist, project, company, dateupdated (Default: date)",
            "in": "query",
            "required": false
          },
          {
            "name": "sortorder",
            "type": "string ",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "(ASC or DESC) - The order to sort the returned data",
            "in": "query",
            "required": false
          },
          {
            "name": "userId",
            "type": "numeric",
            "description": " Return time logs for a specific user only",
            "in": "query",
            "required": false
          },
          {
            "name": "billableType",
            "type": "string",
            "enum": [
              "billable",
              "nonbillable"
            ],
            "description": "(billable or nonbillable) - Filter the Time Entries to those that are Billable or Not Billable.",
            "in": "query",
            "required": false
          },
          {
            "name": "invoicedType",
            "type": "string",
            "enum": [
              "invoiced",
              "noninvoiced"
            ],
            "description": "(invoiced or noninvoiced) - filter the time entries to those that have been Invoiced or not.",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "(all, active, archived) - Filter the time entries to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          },
          {
            "name": "showDeleted",
            "type": "boolean",
            "description": "(true or false) - Filter time entries to include deleted time sheet entries or not",
            "in": "query",
            "required": false
          },
          {
            "name": "tagIds",
            "type": "numeric",
            "description": "Include one or more Tag IDs here to return only the time entries with those tags attached (eg &tagIds=23,445,454)",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/time_entries.json": {
      "get": {
        "summary": "Retrieve All Time Entries for a Project",
        "tags": [
          "Time Tracking"
        ],
        "description": "In ascending order by date, this retrieves time entries for all projects.\nA page can contain up to 500 entries, but to select a different page of data, set the page query parameter to a value greater than zero.\nThe total number of time entries in the project is in the X-Records HTTP header. X-Pages will be set to the total number of pages, and X-Page will be set to the current page.\n\nOptional Parameters\npage  numeric - The page to start retrieving entries from ( e.g: page=1 gives records 1 - 500, page=2 gives records 501-1001 etc)\nfromdate  string (YYYYMMDD) - The start date to retrieve from\nfromtime  string (HH:MM) - The start time only if fromdate is passed\ntodate string (YYYYMMDD) - The end date to retrieve to\ntotime  string (HH:MM) - The end time only if todate is passed\nsortby  string - One of the following: date, user, task, tasklist, project, company, dateupdated (Default: date)\nsortorder: string (ASC or DESC) - The order to sort the returned data\nuserId: numeric - Return time logs for a specific user only\nbillableType  string (billable or nonbillable) - Filter the Time Entries to those that are Billable or Not Billable.\ninvoicedType string (invoiced or noninvoiced) - filter the time entries to those that have been Invoiced or not.\nprojectType  string (all, active, archived) - Filter the time entries to those in Active projects, Archived projects or All projects.\nshowDeleted string (true or false) - Filter time entries to include deleted time sheet entries or not\ntagIds numeric - Include one or more Tag IDs here to return only the time entries with those tags attached (eg &tagIds=23,445,454)\n\nNote\nThe date field returned in the response is in UTC date/time\nThe toDate, toTime, fromDate and fromTime are specified in your timezone.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "type": "integer",
            "description": "The page to start retrieving entries from ( e.g: page=1 gives records 1 - 500. page=2 gives records 501-1001 etc)",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(YYYYMMDD) - The start date to retrieve from",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(YYYYMMDD) - The end date to retrieve to",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "sortby",
            "type": "string",
            "enum": [
              "date",
              "user",
              "task",
              "tasklist",
              "project",
              "company",
              "dateupdated"
            ],
            "description": "One of the following: date, user, task, tasklist, project, company, dateupdated (Default: date)",
            "in": "query",
            "required": false
          },
          {
            "name": "sortorder",
            "type": "string ",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "(ASC or DESC) - The order to sort the returned data",
            "in": "query",
            "required": false
          },
          {
            "name": "userId",
            "type": "numeric",
            "description": " Return time logs for a specific user only",
            "in": "query",
            "required": false
          },
          {
            "name": "billableType",
            "type": "string",
            "enum": [
              "billable",
              "nonbillable"
            ],
            "description": "(billable or nonbillable) - Filter the Time Entries to those that are Billable or Not Billable.",
            "in": "query",
            "required": false
          },
          {
            "name": "invoicedType",
            "type": "string",
            "enum": [
              "invoiced",
              "noninvoiced"
            ],
            "description": "(invoiced or noninvoiced) - filter the time entries to those that have been Invoiced or not.",
            "in": "query",
            "required": false
          },
          {
            "name": "showDeleted",
            "type": "boolean",
            "description": "(true or false) - Filter time entries to include deleted time sheet entries or not",
            "in": "query",
            "required": false
          },
          {
            "name": "tagIds",
            "type": "numeric",
            "description": "Include one or more Tag IDs here to return only the time entries with those tags attached (eg &tagIds=23,445,454)",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "post": {
        "summary": "Create a Time-Entry",
        "tags": [
          "Time Tracking"
        ],
        "description": "For the submitted project, will let you create a new time entry\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/todo_items/{todo_item_id}/time_entries.json": {
      "get": {
        "summary": "Retrieve all To-do Item Times",
        "tags": [
          "Time Tracking"
        ],
        "description": "Retrieves all of the time entries from a submitted todo item.\n",
        "parameters": [
          {
            "name": "todo_item_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/time_entries.json": {
      "post": {
        "summary": "Create a Time-Entry (for a task/todo item)",
        "tags": [
          "Time Tracking"
        ],
        "description": "For the given task/todo item, creates a new time entry. A taskId is the same as a todo-item-id and are used interchangeably in the docs.\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/time_entries/{time_entry_id}.json": {
      "get": {
        "summary": "Retrieve Single Time-Entry",
        "tags": [
          "Time Tracking"
        ],
        "description": "Retrieves a single time-entry.\n",
        "parameters": [
          {
            "name": "time_entry_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update an Entry",
        "tags": [
          "Time Tracking"
        ],
        "description": "Updates the given time-entry record with the data given.\n\nOptional Parameters\nYou can also include 'project-id' in the json/xml to move this timelog to another project\n",
        "parameters": [
          {
            "name": "time_entry_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete Time-Entry",
        "tags": [
          "Time Tracking"
        ],
        "description": "Deletes the referenced Time-Entry\n",
        "parameters": [
          {
            "name": "time_entry_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/time/total.json": {
      "get": {
        "summary": "Time Totals Across Account",
        "tags": [
          "Time Tracking"
        ],
        "description": "You can request aggregated time totals at numerous levels\nTotal time across account: GET /time/total.json\nTotal time on a project : GET /projects/{id}/time/total.json   \nTotal time on a tasklist : GET /tasklists/{id}/time/total.json   \nTotal time on a task : GET /tasks/{id}/time/total.json   \n\nOptional Parameters\nuserId (numeric - default:0 (All Users) ) - Only show totals for userId passed\nfromDate (string - YYYYMMDD format ) - Only show totals from a specific date\ntoDate (string - YYYYMMDD format ) - Only show totals up to a specific date\nfromTime (string - HH:MM format ) - Only show totals from a specific time in conjunction with fromDate\ntoTime (string - HH:MM format ) - Only show totals up to a specific time in conjunction with toDate\nprojectType : string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "type": "integer",
            "description": "(numeric - default:0 (All Users) ) - Only show totals for userId passed",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals from a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals up to a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/time/total.json": {
      "get": {
        "summary": "Project Times Totals",
        "tags": [
          "Time Tracking"
        ],
        "description": "Project Times Totals\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "userId",
            "type": "integer",
            "description": "(numeric - default:0 (All Users) ) - Only show totals for userId passed",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals from a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals up to a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasklists/{tasklist_id}/time/total.json": {
      "get": {
        "summary": "Tasklist Time Totals",
        "tags": [
          "Time Tracking"
        ],
        "description": "Tasklist Time Totals\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "userId",
            "type": "integer",
            "description": "(numeric - default:0 (All Users) ) - Only show totals for userId passed",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals from a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals up to a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/time/total.json": {
      "get": {
        "summary": "Task Times Totals",
        "tags": [
          "Time Tracking"
        ],
        "description": "Task Times Totals\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "userId",
            "type": "integer",
            "description": "(numeric - default:0 (All Users) ) - Only show totals for userId passed",
            "in": "query",
            "required": false
          },
          {
            "name": "fromdate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals from a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals up to a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/time/total.json": {
      "get": {
        "summary": "Time Totals per Project",
        "tags": [
          "Time Tracking"
        ],
        "description": "Optional Parameters\nfromDate (string - YYYYMMDD format ) - Only show totals from a specific date\ntoDate (string - YYYYMMDD format ) - Only show totals up to a specific date\nfromTime (string - HH:MM format ) - Only show totals from a specific time in conjunction with fromDate\ntoTime (string - HH:MM format ) - Only show totals up to a specific time in conjunction with toDate\nprojectType : string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.\npage (numeric - defaults to 1) - The page number to show\npageSize (numeric - defaults to 100) - The number of results per page.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromdate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals from a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "fromtime",
            "type": "string",
            "description": "(HH:MM) - The start time only if fromdate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "todate",
            "type": "string",
            "description": "(string - YYYYMMDD format ) - Only show totals up to a specific date",
            "in": "query",
            "required": false
          },
          {
            "name": "totime",
            "type": "string",
            "description": " (HH:MM) - The end time only if todate is passed",
            "in": "query",
            "required": false
          },
          {
            "name": "projectType",
            "type": "string",
            "enum": [
              "all",
              "active",
              "archived"
            ],
            "description": "string (all, active, archived) - Filter the time totals to those in Active projects, Archived projects or All projects.",
            "in": "query",
            "required": false
          },
          {
            "name": "page",
            "type": "integer",
            "description": "The page number to show",
            "in": "query",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "The number of results per page.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/projects/{project_id}/tasklists.json": {
      "get": {
        "summary": "Get all task lists for a project",
        "tags": [
          "Task Lists"
        ],
        "description": "Retrieves all project task lists\n\nOptions:\nPassing getOverdueCount will return the number of overdue tasks overdue-count for each task list. \nPassing getCompletedCount will return the number of completed tasks completed-count for each task list.\nStatus: You can use the status option to restrict the Task Lists returned - valid values are all, active, and completed. The default is \"\"active\"\"\nPassing showMilestones=1 will add Milestone information in to the response, if a Milestone is attached to the Task List\n\nBy default we'll send back 250 task list/todo list records per page. Inspect the Response Headers for the following values:\nX-Page (The current page being returned)\nX-Pages (The total number of pages available)\nX-Records (The total number of items available\nYou can request a specific page by calling the same API call and adding the parameter &page=n where n is the page you want. e.g: &page=2 for page 2, &page=5 for page 5.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "post": {
        "summary": "Create list",
        "tags": [
          "Task Lists"
        ],
        "description": "Creates a new task list based on the submitted JSON or XML data. If you wish to base the new list on a task list template that you’ve created previously, you can specify the todo-list-template-id field in the data, and the new list will default to the name, description, and tasks indicated by that template.\n\nTask List Template Options\nWhen you're creating the tasklist using a todo-list-template-id you can pass the following\ntodo-list-template-id\ntodo-list-template-start-date (Blank or YYYYMMDD format e.g: 20150314)\ntodo-list-template-keep-off-weekends (Boolean: default false)\ntodo-list-template-assignments (Blank or struct)\n\nThe format of the todo-list-template-assignments struct should be the role name and the value being a comma separated list of user-ids to assign the task to. \n\nAdditonal Options\nYou can pass 'addToTop:true' to force the new item to the top of the tasklists list. The default is false which adds the item to the bottom of the list of tasklists.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/tasklists/{tasklist_id}.json": {
      "get": {
        "summary": "Retrieve Single task list",
        "tags": [
          "Task Lists"
        ],
        "description": "Retrieves the task list corresponding to the submitted integer ID.\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update list",
        "tags": [
          "Task Lists"
        ],
        "description": "Updates the specified task list record with the changes indicated by the submitted data.\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete a task list",
        "tags": [
          "Task Lists"
        ],
        "description": "Destroys the given task list and all of its associated tasks\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/tasklists/reorder.json": {
      "put": {
        "summary": "Reorder lists",
        "tags": [
          "Task Lists"
        ],
        "description": "Reorders the lists in the project according to the ordering given. Any lists that are not explicitly specified will be positioned after the lists that are specified.\n",
        "parameters": [
          {
            "name": "project_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasklist/{tasklist_id}/move.json": {
      "put": {
        "summary": "Move a Task list to another project",
        "tags": [
          "Task Lists"
        ],
        "description": "Move an existing Task list to another Project, based on its Project ID\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasklists/templates.json": {
      "get": {
        "summary": "Template Task Lists Get all template task lists",
        "tags": [
          "Task Lists"
        ],
        "description": "Retrieves all template task lists on your Teamwork Account\n\nNote:\nThis is only available for API Keys associated with Administrators in the Owner Company\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/tasks.json": {
      "get": {
        "summary": "Retrieve all tasks on a task list, project or at top level",
        "tags": [
          "Tasks"
        ],
        "description": "Get all tasks across all projects\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/projects/{project_id}/tasks.json": {
      "get": {
        "summary": "Get all tasks on a given project",
        "tags": [
          "Tasks"
        ],
        "description": "Get all tasks on a given project\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "ID of the object to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasklists/{tasklist_id}/tasks.json": {
      "get": {
        "summary": "Get all tasks on a given task list",
        "tags": [
          "Tasks"
        ],
        "description": "Get all tasks on a given task list\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Add a task",
        "tags": [
          "Tasks"
        ],
        "description": "For the specified task list, creates a task.\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}.json": {
      "get": {
        "summary": "Retrieve a task",
        "tags": [
          "Tasks"
        ],
        "description": "Uses the integer ID to retrieve a single task.\n\nresponsible-party-ids is only returned if the task is assigned to one or more people. If it is not returned then the task is considered assigned to Anyone\n\nprivate Private will return a 0, 1 or 2. An open task will be '0', A private task will be '1' and a task which is in a private list will be a '2' as it will inherit the privacy from the parent task list (or parent task)\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "put": {
        "summary": "Edit a task",
        "tags": [
          "Tasks"
        ],
        "description": "Updates an existing task. See the list of options from \"Add a task\".\n\nYou can use this to set one or more users as Followers of a specified Task\n\nTo remove all users from following a Task, submit the same JSON as adding followers, without passing any User IDs.\n\n\n-- \n\nThere is a 'allow-update' parameter that can be used to allow the completed date of a Task to be updated on a closed task. A completer-id is optional if you want to change the person that completed the task.\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Destroy a task",
        "tags": [
          "Tasks"
        ],
        "description": "Deletes the given task.\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/dependencies.json": {
      "get": {
        "summary": "Retrieve Task Dependencies",
        "tags": [
          "Tasks"
        ],
        "description": "This will list any other Tasks that rely on this task to be completed first.\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/complete.json": {
      "put": {
        "summary": "Mark a task complete",
        "tags": [
          "Tasks"
        ],
        "description": "The specified task is marked as complete\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/uncomplete.json": {
      "put": {
        "summary": "Mark a task uncomplete",
        "tags": [
          "Tasks"
        ],
        "description": "The specified task is marked as un-complete (if called on an already un-complete task, has no effect).\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasklists/{tasklist_id}/tasks/reorder.json": {
      "put": {
        "summary": "Reorder the tasks",
        "tags": [
          "Tasks"
        ],
        "description": "Re-orders tasks on the specified task list. Completed tasks cannot be reordered and any tasks not specified will be sorted after the tasks explicitly specified.\n",
        "parameters": [
          {
            "name": "tasklist_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/completedtasks.json": {
      "get": {
        "summary": "Completed tasks",
        "tags": [
          "Tasks"
        ],
        "description": "Retrieve completed Tasks in the last 1 month. You can use the statedate and enddate to go further back in time.\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/followers.json": {
      "get": {
        "summary": "Get Task Followers",
        "tags": [
          "Tasks"
        ],
        "description": "To get a list of Users that are fllowing the activity of a given Task\n\nOptionally, you can pass a returnUserInfo=true paramter to expand on the user information.\nResponse - including the ?returnUserInfo=true\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/tasks/{task_id}/reminders.json": {
      "get": {
        "summary": "Get all reminders on a task",
        "tags": [
          "Task Reminders"
        ],
        "description": "Get all reminders on a task\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a reminder on a task",
        "tags": [
          "Task Reminders"
        ],
        "description": "Create a reminder on a task\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tasks/{task_id}/reminders/{id}.json": {
      "delete": {
        "summary": "Delete an existing reminder on a task",
        "tags": [
          "Task Reminders"
        ],
        "description": "Delete an existing reminder on a task\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update an existing reminder on a task",
        "tags": [
          "Task Reminders"
        ],
        "description": "Update an existing reminder on a task\n",
        "parameters": [
          {
            "name": "task_id",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/tags.json": {
      "get": {
        "summary": "List All Tags",
        "tags": [
          "Tags"
        ],
        "description": "Lists all tags on your teamwork.com account \n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a single tag",
        "tags": [
          "Tags"
        ],
        "description": "This command will create a single tag.\n\n        color must be valid tag color\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/tags/{tag_id}.json": {
      "get": {
        "summary": "Get a single tag",
        "tags": [
          "Tags"
        ],
        "description": "This returns all details about an individual tag. \n",
        "parameters": [
          {
            "name": "tag_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a single tag",
        "tags": [
          "Tags"
        ],
        "description": "This command will update a single tag.\n\n        color must be valid tag color\n",
        "parameters": [
          {
            "name": "tag_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "delete": {
        "summary": "Delete a single tag",
        "tags": [
          "Tags"
        ],
        "description": "Deletes the tag specified by tag_id.\n",
        "parameters": [
          {
            "name": "tag_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/{resource}/{resource_id}/tags.json": {
      "get": {
        "summary": "List All Tags For A Resource",
        "tags": [
          "Tags"
        ],
        "description": "Lists all tags for a given resource\n\n        Resources\n        projects\n        tasklists\n        tasks\n        milestones\n        messages\n        timelogs\n        files\n        users\n        companys\n        notebooks\n        links\n        \n",
        "parameters": [
          {
            "name": "resource",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      },
      "put": {
        "summary": "Update Tags On A Resource",
        "tags": [
          "Tags"
        ],
        "description": "Updates the tags for a given resource\n\n        Resources\n        projects\n        tasklists\n        tasks\n        milestones\n        messages\n        timelogs\n        files\n        users\n        companys\n        notebooks\n        links\n\n        Optional Parameters\n        replaceExistingTags (boolean - default=false) - Replace any existing tags with the tags sent in content\n        removeProvidedTags (boolean - default=false) - Don't add tags, just remove any tags sent in content\n",
        "parameters": [
          {
            "name": "resource",
            "type": "int",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input\""
          }
        }
      }
    },
    "/webhooks/events.json": {
      "get": {
        "summary": "Get a list of all Webhook Events that can be used",
        "tags": [
          "Web Hooks"
        ],
        "description": "Get a list of all Webhook Events that can be used\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks.json": {
      "get": {
        "summary": "Get all webhooks set on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Get all webhooks set on your account\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "post": {
        "summary": "Create a new webhook on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Create a new webhook on your account\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks/{webhook_id}.json": {
      "get": {
        "summary": "Get details of a specific webhook set on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Get details of a specific webhook set on your account\n",
        "parameters": [
          {
            "name": "webhook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "summary": "Update a specific webhook set on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Update a specific webhook set on your account\n",
        "parameters": [
          {
            "name": "webhook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific webhook on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Delete a specific webhook on your account\n",
        "parameters": [
          {
            "name": "webhook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks/{webhook_id}/resume.json": {
      "put": {
        "summary": "Resume a specific webhook set on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Resume a specific webhook set on your account\n",
        "parameters": [
          {
            "name": "webhook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks/{webhook_id}/pause.json": {
      "put": {
        "summary": "Pause a specific webhook on your account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Pause a specific webhook on your account\n",
        "parameters": [
          {
            "name": "webhook_id",
            "type": "int",
            "in": "path",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks/enable.json": {
      "put": {
        "summary": "Enable Webhooks on your Teamwork.com Projects account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Enable Webhooks on your Teamwork.com Projects account\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/webhooks/disable.json": {
      "put": {
        "summary": "Disable Webhooks on your Teamwork.com Projects account",
        "tags": [
          "Web Hooks"
        ],
        "description": "Disable Webhooks on your Teamwork.com Projects account\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    },
    "/workload.json": {
      "get": {
        "summary": "Workload",
        "tags": [
          "Workload"
        ],
        "description": "List the workload across all projects, sort by Users, Company or Project\n",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/InventoryItem"
              }
            }
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "InventoryItem": {
      "type": "object",
      "required": [
        "id",
        "name",
        "manufacturer",
        "releaseDate"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "name": {
          "type": "string",
          "example": "Widget Adapter"
        },
        "releaseDate": {
          "type": "string",
          "format": "int32",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "manufacturer": {
          "$ref": "#/definitions/Manufacturer"
        }
      }
    },
    "Manufacturer": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ACME Corporation"
        },
        "homePage": {
          "type": "string",
          "format": "url",
          "example": "https://www.acme-corp.com"
        },
        "phone": {
          "type": "string",
          "example": "408-867-5309"
        }
      }
    },
    "Invoice": {
      "required": [],
      "properties": {}
    }
  },
  "securityDefinitions": {
    "login": {
      "type": "basic",
      "description": "HTTP Authentication"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/[YOUR_TEAMVIEWER_USERNAME]/TeamWorkAPI/1.0.0",
  "schemes": [
    "https"
  ]
}
